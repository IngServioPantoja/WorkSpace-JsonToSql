/*
* generated by Xtext
*/
grammar InternalGrammar;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package co.edu.uniandes.jsonToSql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package co.edu.uniandes.jsonToSql.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import co.edu.uniandes.jsonToSql.services.GrammarGrammarAccess;

}

@parser::members {

 	private GrammarGrammarAccess grammarAccess;
 	
    public InternalGrammarParser(TokenStream input, GrammarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Config";	
   	}
   	
   	@Override
   	protected GrammarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfig
entryRuleConfig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigRule()); }
	 iv_ruleConfig=ruleConfig 
	 { $current=$iv_ruleConfig.current; } 
	 EOF 
;

// Rule Config
ruleConfig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='\'config\':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigAccess().getConfigKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='\'conecction:\'' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigAccess().getConecctionKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigAccess().getConecctionConnectionParserRuleCall_3_0()); 
	    }
		lv_conecction_3_0=ruleConnection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigRule());
	        }
       		set(
       			$current, 
       			"conecction",
        		lv_conecction_3_0, 
        		"Connection");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='\'mergeFields\':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigAccess().getMergeFieldsKeyword_4_0());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfigAccess().getLeftSquareBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigAccess().getMergeFieldsMergedFieldParserRuleCall_4_2_0()); 
	    }
		lv_mergeFields_6_0=ruleMergedField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigRule());
	        }
       		add(
       			$current, 
       			"mergeFields",
        		lv_mergeFields_6_0, 
        		"MergedField");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConfigAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigAccess().getMergeFieldsMergedFieldParserRuleCall_4_3_1_0()); 
	    }
		lv_mergeFields_8_0=ruleMergedField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigRule());
	        }
       		add(
       			$current, 
       			"mergeFields",
        		lv_mergeFields_8_0, 
        		"MergedField");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConfigAccess().getRightSquareBracketKeyword_4_4());
    }
)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConfigAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	 iv_ruleConnection=ruleConnection 
	 { $current=$iv_ruleConnection.current; } 
	 EOF 
;

// Rule Connection
ruleConnection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConnectionAccess().getConnectionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='\'url\':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getUrlKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectionAccess().getUrlEStringParserRuleCall_2_1_0()); 
	    }
		lv_url_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectionRule());
	        }
       		set(
       			$current, 
       			"url",
        		lv_url_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='\'username\':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConnectionAccess().getUsernameKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectionAccess().getUsernameEStringParserRuleCall_3_1_0()); 
	    }
		lv_username_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectionRule());
	        }
       		set(
       			$current, 
       			"username",
        		lv_username_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='\'password\':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConnectionAccess().getPasswordKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConnectionAccess().getPasswordEStringParserRuleCall_4_1_0()); 
	    }
		lv_password_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConnectionRule());
	        }
       		set(
       			$current, 
       			"password",
        		lv_password_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConnectionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleMergedField
entryRuleMergedField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMergedFieldRule()); }
	 iv_ruleMergedField=ruleMergedField 
	 { $current=$iv_ruleMergedField.current; } 
	 EOF 
;

// Rule MergedField
ruleMergedField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMergedFieldAccess().getLeftCurlyBracketKeyword_0());
    }
(	otherlv_1='\'tableName\':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMergedFieldAccess().getTableNameKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergedFieldAccess().getTableNameEStringParserRuleCall_1_1_0()); 
	    }
		lv_tableName_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergedFieldRule());
	        }
       		set(
       			$current, 
       			"tableName",
        		lv_tableName_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='\'fields\':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMergedFieldAccess().getFieldsKeyword_2());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMergedFieldAccess().getLeftSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergedFieldAccess().getFieldsFieldParserRuleCall_4_0()); 
	    }
		lv_fields_5_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergedFieldRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMergedFieldAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergedFieldAccess().getFieldsFieldParserRuleCall_5_1_0()); 
	    }
		lv_fields_7_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergedFieldRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_7_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMergedFieldAccess().getRightSquareBracketKeyword_6());
    }
	otherlv_9='\'attributeNames\':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMergedFieldAccess().getAttributeNamesKeyword_7());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMergedFieldAccess().getLeftSquareBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergedFieldAccess().getAttributeNamesAttributeNameParserRuleCall_9_0()); 
	    }
		lv_attributeNames_11_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergedFieldRule());
	        }
       		add(
       			$current, 
       			"attributeNames",
        		lv_attributeNames_11_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMergedFieldAccess().getCommaKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergedFieldAccess().getAttributeNamesAttributeNameParserRuleCall_10_1_0()); 
	    }
		lv_attributeNames_13_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergedFieldRule());
	        }
       		add(
       			$current, 
       			"attributeNames",
        		lv_attributeNames_13_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMergedFieldAccess().getRightSquareBracketKeyword_11());
    }
	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMergedFieldAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeNameAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getOldFieldEStringParserRuleCall_1_0()); 
	    }
		lv_oldField_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeNameRule());
	        }
       		set(
       			$current, 
       			"oldField",
        		lv_oldField_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeNameAccess().getCommaKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getFinalFieldFieldCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeNameAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFieldAccess().getFieldAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getTypeFieldTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Rule FieldType
ruleFieldType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='String' 
	{
        $current = grammarAccess.getFieldTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFieldTypeAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Integer' 
	{
        $current = grammarAccess.getFieldTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFieldTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Float' 
	{
        $current = grammarAccess.getFieldTypeAccess().getFloatEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFieldTypeAccess().getFloatEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Boolean' 
	{
        $current = grammarAccess.getFieldTypeAccess().getBooleanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFieldTypeAccess().getBooleanEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


